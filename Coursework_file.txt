import java.io.File;
import java.util.Scanner;
public class Task_One {
    // create 2D array for View all Queues
    private final String[][] cashiers = {{"0", "0", "0", "0", "0"}, {"0", "0", "0"}, {"0", "0"}};

    // Foodies Fave Food Center Main Menu
    public void main_menu() {
        System.out.println("-------------------------------------------------------------------------" +
                "-------------------------------------------------------------------------------------");
        System.out.println("\t\t\t\t\t\t\t\t\t\t\t\t\t\tFoodies Fave Food Center");
        System.out.println("-------------------------------------------------------------------------" +
                "-------------------------------------------------------------------------------------");
        System.out.println("------------------ Main Menu ------------------ ");
        System.out.println("100 or VFQ: View all Queues.");
        System.out.println("101 or VEQ: View all Empty Queues.");
        System.out.println("102 or ACQ: Add customer to a Queue.");
        System.out.println("103 or RCQ: Remove a customer from a Queue. (From a specific location)");
        System.out.println("104 or PCQ: Remove a served customer.");
        System.out.println("105 or VCS: View Customers Sorted in alphabetical order (Do not use library sort routine)");
        System.out.println("106 or SPD: Store Program Data into file.");
        System.out.println("107 or LPD: Load Program Data from file");
        System.out.println("108 or STK: View Remaining burgers Stock.");
        System.out.println("109 or AFS: Add burgers to Stock");
        System.out.println("999 or EXT: Exit the Program.");
    }

    // create method for View all Queues
    private void view_all_queues() {
        System.out.println("View all Queues.");

        System.out.println("* * * * * * * * * * * * * * * * * * ");
        System.out.println("* \t\t\t Cashiers \t\t\t  *");
        System.out.println("* * * * * * * * * * * * * * * * * * ");

        boolean max_customer = false;
        int customer_count = 0;
        while (!max_customer) {
            int done = 0;
            System.out.print("\t\t\t");
            for (String[] cashier : cashiers) {
                if (cashier.length > customer_count)
                    System.out.print(cashier[customer_count] + "   ");
                else done++;
            }
            System.out.println();
            customer_count++;
            if (done == cashiers.length) max_customer = true;
        }
        System.out.println("X-Occupied O â€“ Not Occupied");
    }

    //create method for View all Empty Queues
    private void view_all_empty_queue() {
        System.out.println("Empty Queues: ");
        System.out.println("\tqueue_1");
        System.out.println("\tqueue_2");
        System.out.println("\tqueue_3");

        String queue_1, queue_2, queue_3;
        queue_1 = "Maximum customers 5";
        queue_2 = "Maximum customers 3";
        queue_3 = "Maximum customers 2";

        if (queue_1.isEmpty()) {
            System.out.println("Queue_1 is Empty.");
        }
        if (queue_2.isEmpty()) {
            System.out.println("Queue_2 is Empty.");
        }
        if (queue_3.isEmpty()) {
            System.out.println("Queue_3 is Empty.");
        }
    }

    // create method for  Add customer to a Queue

    private void add_customer_to_a_queue() {
        Scanner input = new Scanner(System.in);
        System.out.print("PLease enter customer name: ");
        String customer_name = input.nextLine();

        Scanner scanner_queue_1 = new Scanner(System.in);
        System.out.print("How many customers are there in queue_1: ");
        String check_queue_1 = scanner_queue_1.nextLine();

        Scanner scanner_queue_2 = new Scanner(System.in);
        System.out.print("How many customers are there in queue_2: ");
        String check_queue_2 = scanner_queue_2.nextLine();

        Scanner scanner_queue_3 = new Scanner(System.in);
        System.out.print("How many customers are there in queue_3: ");
        String check_queue = scanner_queue_3.nextLine();

        System.out.println();

        int queue_1_to_add_Maximum_customer_count = 5;
        int queue_2_to_add_Maximum_customer_count = 3;
        int queue_3_to_add_Maximum_customer_count = 2;

        if (cashiers.length <= queue_1_to_add_Maximum_customer_count){
            System.out.println("cashier queue_1 is successfully add a customer!");
        }else if (cashiers.length == 0){
            System.out.println("cashier queue_1 is not successfully!.Please add customers to cashier queue_1.");
        }else {
            System.out.println("Successfully added maximum number of customers.Please join the another cashier queue.");
        }

        if (cashiers.length <= queue_2_to_add_Maximum_customer_count){
            System.out.println("cashier queue_2 is successfully add a customer!");
        }else if(cashiers.length == 0) {
            System.out.println("cashier queue_2 is not successfully!.Please add customers to cashier queue_2.");
        }else {
            System.out.println("Successfully added maximum number of customers.Please join the another cashier queue.");
        }

        if (cashiers.length >= queue_3_to_add_Maximum_customer_count){
            System.out.println("cashier queue_3 is successfully add a customer!");
        }else if (cashiers.length == 0){
            System.out.println("cashier queue_3 is not successfully!.Please add customers to cashier queue_3.");
        }else {
            System.out.println("Successfully added maximum number of customers.Please join the another cashier queue.");
        }
    }

    // create method for Remove a customer from a Queue. (From a specific location)
    private void remove_a_customer(){
        int queue_1_to_add_Maximum_customer_count = 5;
        int queue_2_to_add_Maximum_customer_count = 3;
        int queue_3_to_add_Maximum_customer_count = 2;
        if (cashiers.length < queue_1_to_add_Maximum_customer_count) {
            System.out.println("Remove a customer from queue_1");
        } else if (cashiers.length < queue_2_to_add_Maximum_customer_count) {
            System.out.println("Remove a customer from queue_2");
        } else if (cashiers.length > queue_3_to_add_Maximum_customer_count) {
            System.out.println("Remove a customer from queue_3");
        }
    }

  // Store Program Data into file.
    private void store_program_data() {
        File file = new File("coursework_file.txt");
        try {
            System.out.println(file.createNewFile());
        } catch (Exception e) {
            System.out.println(e);
        }
    }

 public static void main(String[] args) {
        // coursework name and student name
        System.out.println("-------------------------------------------------------------------------" +
                "-------------------------------------------------------------------------------------");
        System.out.println("\t\t\t\t\t\t\t\t\t\t4COSC010C.3 Software Development II Course Work" + " " + "Bhagya Galhena.");
        // shop name
        System.out.println("\t\t\t\t\t\t\t\t\t\tFoodies Fave Food Center");
        // task one
        System.out.println("\t\t\t\t\t\t\t\t\t\tTask 1. Arrays version");
        System.out.println("-------------------------------------------------------------------------" +
                "-------------------------------------------------------------------------------------");
        while (true) {
            // create an object for above method
            Task_One menu_item= new Task_One();
            menu_item.main_menu();

            // get input
            Scanner scanner = new Scanner(System.in);
            System.out.print("\nPlease enter your menu number: ");
            String menu_code = scanner.nextLine();

            if (menu_code.equals("100") || menu_code.equalsIgnoreCase("VFQ")) {
                System.out.println("View all Queues.");
                 Task_One get_queues = new Task_One();
                 get_queues.view_all_queues();
            }

            else if (menu_code.equals("101") || menu_code.equalsIgnoreCase("VEQ")){
                System.out.println("View all Empty Queues.");
                Task_One get_empty_queue = new Task_One();
                get_empty_queue.view_all_empty_queue();
            }
            else if (menu_code.equals("102") || menu_code.equalsIgnoreCase("ACQ")) {
                System.out.println("Add customer to a Queue.");
                Task_One check_queues = new Task_One();
                check_queues.add_customer_to_a_queue();

            } else if (menu_code.equals("103") || menu_code.equalsIgnoreCase("RCQ")) {
                System.out.println("Remove a customer from a Queue. (From a specific location)");
                Task_One remove_customer = new Task_One();
                remove_customer.remove_a_customer();

            } else if (menu_code.equals("104") || menu_code.equalsIgnoreCase("PCQ")) {
                System.out.println("Remove a served customer");

            } else if (menu_code.equals("105") || menu_code.equalsIgnoreCase("VCS")) {
                System.out.println("View Customers Sorted in alphabetical order (Do not use library sort routine)");

            } else if (menu_code.equals("106") || menu_code.equalsIgnoreCase("SPD")) {
                System.out.println("Store Program Data into file.");
                Task_One store_programme_data = new Task_One();
                store_programme_data.store_program_data();

            } else if (menu_code.equals("107") || menu_code.equalsIgnoreCase("LPD")) {
                System.out.println("Load Program Data from file.");

            } else if (menu_code.equals("108") || menu_code.equalsIgnoreCase("STK")) {
                System.out.println("View Remaining burgers Stock.");

            } else if (menu_code.equals("109") || menu_code.equalsIgnoreCase("AFS")) {
                System.out.println("Add burgers to Stock.");

            } else if (menu_code.equals("999") || menu_code.equalsIgnoreCase("EXT")) {
                System.out.println("Exit the Program.");
                break;
            } else System.out.println("Invalid code!.Please reenter your code.");
        }
    }
        }